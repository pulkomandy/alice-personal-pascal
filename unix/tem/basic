
# Templates for alice basic

# Root for basic
Node: NULL
Name: "root"
Template:  "!c" 
KidMatrix: nil
Flags: LINE
Infix: false
NodeCount: 1, 1
Class:  PROGRAM 


Node: T_COMMENT
Name: "comment"
Template:  "!c!ag!1E"
KidMatrix: nil
Flags: none
Infix: false
NodeCount: 0, 1
Class: 0


Node: PROGRAM
Name: "basic program"
Template:  "!c!! ALICE Basic Program"
		"!1l\n"
	   	"!2l\n"
		"!3l\n"
		"!kend\n"
		"!4l\n"
		""

KidMatrix:  0,1,2,3,5
Flags: DECLARE LINE SYMBOL SCOPE
Infix: false
NodeCount: 4, 6
Class:	list BLCOMMENT
	list DECLARATIONS
	list STATEMENT
	list PROCFUN
Actions:
			"end", any, chgoto 3
			"def", any, gdefine,
			"proc", any, gdefine,
			"cr", pcode 0, BLCR,


# How will this be done ?
Node: DECL_VAR
Name: "declarations"
Template:   	"!! !1p is !2p"
KidMatrix:   nil
Flags: DECLARE  LINE  INDENT
Infix: false
NodeCount: 2, 2
Class:  DECL_ID COMMENT
Actions:
			"cr", any, cr,
			"!", any, chgoto 1


Node: DECL_PROC
Name: "procedure"
Template:   "!n!c!kproc !(proc-name)!1p(!2,),!3,\n",
		"!4l\n",   # Data descriptions (locals )
		"!5l\n",     # Statements
		"!kendproc\n" 
KidMatrix:  0, 0,0,0,1,2 
Flags: LINE INDENT SYMBOL SCOPE
Infix: false
NodeCount: 5, 7
Class: DECL_ID, list FORMAL, list LOCAL, list BLCOMMENT,
 	list STATEMENT
Actions: 
		"(", exact upkid 0, REEXPAND,
		")", upkid 1, chgoto 2,
		",", upkid 1, C_EXPAND,
		",", upkid 2, C_EXPAND,
		"endproc", any, CRIGHT,
		"cr", pcode 3, H_EXPAND,
		"cr", any, BLCR,
		",", pcode 0, chgoto 2,
		",", upkid 0, chgoto 2,


Node: IMM_BLOCK
Name: "immediate mode"
Flags: LINE INDENT SYMBOL SCOPE
Infix: false
NodeCount: 2,4
Class: list DECLARATIONS list STATEMENT

Node: DECL_FUNC
Name: "function"
Template:   "!n!c!kdef !(function-name)!1p(!2,),!3,\n",
	"!4l\n",
	"!5l\n",
	"!kfnend\n" 
KidMatrix:  0, 0,0,0,1,2 
Flags: LINE INDENT SYMBOL SCOPE
Infix: false
NodeCount: 5, 7 
Class: DECL_ID, list FORMAL, list LOCAL,
	list BLCOMMENT, list STATEMENT
Actions: 
		"(", exact upkid 0, REEXPAND,
		")", upkid 1, chgoto 2,
		",", upkid 1, C_EXPAND,
		",", upkid 2, C_EXPAND,
		"fnend", any, CRIGHT,
		"cr", pcode 3, H_EXPAND,
		"cr", any, BLCR,
		",", pcode 0, chgoto 2,
		",", upkid 0, chgoto 2,


Node: NOTDONE
Name: "pass through comment"
Template:   "!1p !c!! non-ALICE\n"
KidMatrix: nil
Flags: LINE
Infix: true
NodeCount: 1, 1
Class:  COMMENT  
Actions: "cr", any, CR,

Node: TYP_DIM
Name: "dim"
Template:   "!c!kdim !1,"
KidMatrix: nil
Flags: LINE
Infix: true
NodeCount: 1, 1
Class: list ARDECL
Actions:
	"dim", any, chgoto 0,
	"cr", any, CR,
	",", upkid 0, C_EXPAND,

Node: TYP_ARDECL
Name: "array dimension"
Template: "!1p[!2,]"
KidMatrix: nil
Flags:
Infix: true
NodeCount: 2,3
Class: ARID, list EXP
Actions:
	"[", any, chgoto 1,
	"]", any, CRIGHT,
	",", upkid 1, C_EXPAND,



Node: ST_COMMENT
Name: "statement comment"
Template:   "!c!! !1p\n"
KidMatrix: nil
Flags: LINE
Infix: false
NodeCount: 1, 1
Class:  COMMENT  
Actions: "cr", any, CR,
	"!", any, chgoto 0,


Node: ST_GOTO
Name: "goto"
Template:   "!c!kgoto !1p\n"
KidMatrix: nil
Flags: LINE
Infix: false
NodeCount: 1, 1
Class:  LABEL  
Actions: "cr", any, CR,
	"goto", any, chgoto 0,

Node: ST_GOSUB
Name: "gosub"
Template:   "!c!kgosub !1p\n"
KidMatrix: nil
Flags: LINE
Infix: false
NodeCount: 1, 1
Class:  LABEL  
Actions: "cr", any, CR,
	"gosub", any, chgoto 0,

Node: ST_LABEL
Name: "label"
Template:	"!c!klabel !1p\n"
KidMatrix: nil
Flags: LINE
Infix: false
NodeCount: 1,1
Class: LABDEC
Actions: "cr", any, CR,
	":", any, chgoto 0,
	"label", any, chgoto 0,


Node: ST_ONGOTO
Name: "on goto"
Template:   "!c!kon !1p goto !2,\n"
KidMatrix: nil
Flags: LINE
Infix: false
NodeCount: 2, 2
Class:  EXP, list LABEL  
Actions: "cr", any, CR,
		"on", any, chgoto 0,
		"goto", any, chgoto 1,
		",", upkid 1, C_EXPAND,
		"gosub", any, TYPEMAP,

Node: ST_ONGOSUB
Name: "on gosub"
Template:   "!c!kon !1p gosub !2,\n"
KidMatrix: nil
Flags: LINE
Infix: false
NodeCount: 2, 2
Class:  EXP, list LABEL  
Actions: "cr", any, CR,
		"on", any, chgoto 0,
		"gosub", any, chgoto 1,
		",", upkid 1, C_EXPAND,
		"goto", any, TYPEMAP,

Node: ST_QUIT
Name: "quit"
Template: "!c!kquit!1o : !1p!o\n"
KidMatrix: nil
Flags: LINE
Infix: false
NodeCount: 1 1
Class: LABEL
Actions: "cr", any, CR,
		":", any, chgoto 0,


Node: ST_CALL
Name: "procedure call"
Template:   "!c!kcall !1p(!2,)\n"
KidMatrix: nil
Flags: LINE
Infix: true
NodeCount: 2, 2
Class:  PROC_ID, list EXP
Actions: "cr", any, CR,
		",", upkid 1, CMMA_EXPAND,
		"(", any, REEXPAND,
		")", any, IGNORE,
		"call", any, chgoto 0,

Node: ST_PRINT
Name: "print"
Template:   "!c!kprint !1i\n"
KidMatrix: nil
Flags: LINE
Infix: false
NodeCount: 1, 1
Class:  list PRINT_ITEM
Actions: "cr", any, CR,
	",", upkid 0, PRDEL2,
	";", upkid 0, PRDEL2,

Node: PR_FILENUM
Name: "file number"
Template:   "!c#!1p"
KidMatrix: nil
Flags: 
Infix: false
NodeCount: 1, 1
Class:  EXP
Actions:  
	"#", any, chgoto 0,

Node: PR_USING
Name: "format"
Template:   "!c!kusing !(image)!1p"
KidMatrix: nil
Flags: 
Infix: false
NodeCount: 1, 1
Class:  EXP
Actions:  
	"using", any, chgoto 0,

Node: PR_REC
Name: "record number"
Template:   "!c!kREC=!1p"
KidMatrix: nil
Flags: 
Infix: false
NodeCount: 1, 1
Class:  EXP
Actions:  
	"rec", any, chgoto 0,
	"=", any, chgoto 0,

Node: PR_COMMA
Name: "print comma"
Template:   "!c, "
KidMatrix: nil
Flags: 
Infix: false
NodeCount: 0, 0
Class: 0
Actions:  

Node: PR_SEMI
Name: "print semicolon"
Template:   "!c;"
KidMatrix: nil
Flags: 
Infix: false
NodeCount: 0, 0
Class:  0
Actions:  

Node: PR_TAB
Name: "tab"
Template:   "!c!ktab(!1p)"
KidMatrix: nil
Flags: 
Infix: false
NodeCount: 1, 1
Class:  EXP
Actions:  
	"(", any, chgoto 0,
	")", any, C_EXPAND,
	"tab", any, chgoto 0

Node: MAT_PREFIX
Name: "mat"
Template:   "!c!kmat !1p"
KidMatrix: nil
Flags: 
Infix: false
NodeCount: 1, 1
Class:  VAR
Actions:  
	"mat", any, chgoto 0,

Node: MAT_PARAM
Name: "matrix parameter"
Template:   "!c!kmat !1p"
KidMatrix: nil
Flags: 
Infix: false
NodeCount: 1, 1
Class:  DECL_ID
Actions:  
	"mat", any, chgoto 0,

Node: ST_INPUT
Name: "print"
Template:   "!c!kinput !1,\n"
KidMatrix: nil
Flags: LINE
Infix: true
NodeCount: 1, 1
Class:  list INP_ITEM
Actions:  "cr", any, CR,
	",", upkid 0, C_EXPAND,
	"input", any, chgoto 0,

Node: ST_LINPUT
Name: "print"
Template:   "!c!klinput !1,\n"
KidMatrix: nil
Flags: LINE
Infix: true
NodeCount: 1, 1
Class:  list INP_ITEM
Actions:  
		"cr", any, CR,
		",", upkid 0, C_EXPAND,
		"linput", any, chgoto 0,

Node: ST_READ
Name: "read"
Template:   "!c!kread !1,\n"
KidMatrix: nil
Flags: LINE
Infix: true
NodeCount: 1, 1
Class:  list VAR
Actions:  
	"cr", any, CR,
	",", upkid 0, C_EXPAND,
	"read", any, chgoto 0,

Node: ST_GET
Name: "get"
Template:   "!c!kget #!1p, !2p"
KidMatrix: nil
Flags: LINE
Infix: false
NodeCount: 2, 2
Class:  EXP, VAR
Actions:  
	"cr", any, CR,
	"get", any, chgoto 0,
	"#", any, chgoto 0,
	",", any, chgoto 1,

Node: ST_ASSIGN
Name: "let statement"
Template:   "!c!klet !1p = !2p\n"
KidMatrix: nil
Flags: E2KIDS  LINE
Infix: false
NodeCount: 2, 3
Class: VAR, EXP  
Actions:
	"cr", any, CR,
	"let", any, chgoto 0,
	"=", any, chgoto 1,
	":", any, chgoto 1,
	"mat", exact upkid 0, TYPEMAP,

Node: ST_MAT
Name: "matrix statement"
Template:   "!c!kmat !1p = !2p\n"
KidMatrix: nil
Flags: E2KIDS  LINE
Infix: false
NodeCount: 2, 3
Class: VAR, EXP  
Actions:
	"cr", any, CR,
	"mat", any, chgoto 0,
	"=", any, chgoto 1,
	"let", exact upkid 0, TYPEMAP,

Node: ST_POINTER
Name: "matrix statement"
Template:   "!c!kpointer !1p refers to !2p\n"
KidMatrix: nil
Flags: E2KIDS  LINE
Infix: true
NodeCount: 2, 3
Class: VAR, EXP  
Actions:
	"cr", any, CR,
	"pointer", any, chgoto 0,
	"to", any, chgoto 1,

Node: ST_DATA
Name: "data"
Template:   "!c!kdata !1,\n"
KidMatrix: nil
Flags: LINE
Infix: true
NodeCount: 1, 1
Class:  list CONST
Actions:  
	"cr", any, CR,
	"data", any, chgoto 0,
	",", upkid 0, C_EXPAND,

Node: ST_TRACE
Name: "trace block"
Template:   			"!c!ktrace !1p\n",
				"!2l\n",
				"!T!kendtrace\n",
KidMatrix:  0, 0, 1  
Flags: LINE  INDENT
Infix: true
NodeCount: 2, 2
# this class is not done yet
Class:  EXP, list STATEMENT
Actions:
	"endtrace", any, H_EXPAND,
	"cr", pcode 2, H_EXPAND,
	"cr", any, BLCR,

Node: ST_BUILT
Name: "Builtin Statement"
Template:	"!c!B !1,\n"
KidMatrix: nil
Flags: LINE
Infix: false
NodeCount 1, 2
Class: list EXP
Actions:
	"cr", any, CR,
	",", exact pcode 0, chgoto 0,
	",", upkid 0, C_EXPAND,

Node: ST_IF
Name: "if-then"
Template:   "!c!kif !(Condition)!1p then!2o : !2p!o\n",
				"!3l\n",
				"!T!kendif!2o : !2p!o\n"
KidMatrix:  0, 0,0,1 
Flags: E1KID  LINE  INDENT
Infix: false
NodeCount: 3, 3
Class:  EXP, duplicate LABDEC, list STATEMENT
Actions:  
	"cr", pcode 2, H_EXPAND,
	"endif", any, H_EXPAND,
	"if", any, chgoto 0,
	"then", any, chgoto 1,
	":", any, chgoto 1,
	"cr", any, BLCR,
	"else", any, DELSE,


#if statement with ELSE or ELSEIF CLAUSES

Node: ST_IFELSE
Name: "if-then-else"
Template:   			"!c!kif !(Condition)!1p then!2o : !2p!o\n",
				"!3l\n",
				"!4l\n",
				"!T!kendif!2o : !2p!o\n"
KidMatrix:  0, 0,0,1,3 
Flags: E1KID  LINE  INDENT
Infix: false
NodeCount: 4, 4
Class:  EXP, duplicate LABDEC, list STATEMENT, list ELSEIFS
Actions:  
	"cr", pcode 3, H_EXPAND,
	"endif", any, H_EXPAND,
	"if", any, chgoto 0,
	"then", any, chgoto 1,
	":", any, chgoto 1,
	"cr", any, BLCR,

Node: EL_ELIF
Name: "else"
Template:
			"!c!kelseif\n",
			"!1l\n"
KidMatrix: 0, 1
Flags: LINE
Infix: false
NodeCount: 1,1
Class: list STATEMENT
Actions:

Node: EL_ELSE
Name: "else"
Template:
			"!c!kelse\n",
			"!1l\n"
KidMatrix: 0, 1
Flags: LINE
Infix: false
NodeCount: 1,1
Class: list STATEMENT
Actions:


Node: ST_FOR
Name: "for loop"
Template: "!c!kfor !(variable)!1p = !(start)!2p to !(finish)!3p!4o step !4p!o !5o : !5p!o\n",
				"!6l\n",
				"!knext !1p\n"
KidMatrix:  0, 0,0,0,0,0,1 
Flags: E2KIDS  LINE  INDENT
Infix: false
NodeCount: 6, 6
Class:  duplicate VAR, EXP, EXP, EXP, LABDEC, list STATEMENT
Actions:  
	"cr", pcode 2, H_EXPAND,
	"next", any, H_EXPAND,
	"for", any, chgoto 0,
	"=", any, chgoto 1,
	"to", any, chgoto 2,
	"step", any, chgoto 3,
	":", any, chgoto 4,
	"cr", any, BLCR,


Node: ST_WHILE
Name: "while loop"
				
Template:   			"!c!kwhile !(Condition)!1p!2o : !2p!o\n",
				"!3l\n",
				"!T!kendwhile!2o : !2p!o\n"
KidMatrix:  0, 0,0,1 
Flags: LINE  INDENT
Infix: false
NodeCount: 3, 3
Class:  EXP, duplicate LABDEC, list STATEMENT
Actions:  
	"cr", pcode 2, H_EXPAND,
	"endwhile", any, H_EXPAND,
	"while", any, chgoto 0,
	":", any, chgoto 1,
	"cr", any, BLCR,

Node: ST_LOOP
Name: "endless loop"
Flags: LINE INDENT
Template: 			"!c!kloop!1o : !1p!o\n"
					  "!2l\n"
				"!T!kendloop!1o : !1p!o\n"
KidMatrix: 0,0, 1
Infix: false
NodeCount: 2 2
Class: duplicate LABDEC, list STATEMENT
Actions:
	"cr", pcode 2, H_EXPAND,
	"endloop", any, H_EXPAND,
	"loop", any, chgoto 0,
	":", any, chgoto 0,
	"cr", any, BLCR,


Node: ST_REPEAT
Name: "repeat loop"
Template:		"!c!krepeat!1o : !1p!o\n",
				"!2l\n",
			"!kuntil !(Condition)!3p!1o : !1p!o\n"
KidMatrix:  0, 0, 1,2 
Flags: LINE  INDENT
Infix: false
NodeCount: 3, 3
Class:  duplicate LABDEC list STATEMENT, EXP  
Actions:  
	"cr", pcode 2, H_EXPAND,
	"cr", upkid 2, H_EXPAND,
	"until", any, chgoto 2,
	"repeat", any, chgoto 0,
	":", any, chgoto 0,
	"cr", any, BLCR,



Node: ST_SELECT
Name: "select"
Template:		"!c!kselect !1p from\n",
				"!2l\n",
			"!T!kendselect\n"
KidMatrix:  0, 0,1 
Flags: E1KID  LINE  INDENT
Infix: false
NodeCount: 2, 2
Class:  EXP, list CASE
Actions:  
	"cr", pcode 2, H_EXPAND,
	"endselect", any, H_EXPAND,
	"select", any, chgoto 0,
	"from", any, chgoto 1,
	"cr", pcode 2, H_EXPAND,
	"cr", any, BLCR,



Node: ST_COUT
Name: "commented out code"
Template:   			"!c!!\n",
					"!1l\n",
				"!! Done\n"
KidMatrix:  0, 1 
Flags: LINE  INDENT
Infix: false
NodeCount: 1, 1
Class:  list STATEMENT

Node: ST_SPECIAL
Name: "generic block"
Template:			"!k!1p !cgeneric\n",
				"!2l\n",
				"!T!kend\n",
KidMatrix:  0, 0, 1  
Flags: LINE  INDENT
Infix: true
NodeCount: 2, 2
# class should be SPECIAL
Class:  EXP, list STATEMENT
Actions:			"end", any, CRIGHT,
				"cr", pcode 2, H_EXPAND,
				"cr", any, blcr 0,


Node: CASE
Name: "select instance"
Template:			"!c!kcase !1p:\n",
					"!2l\n",
				"!T!kendcase\n"
KidMatrix:  0, 0,1 
Flags: LINE  INDENT
Infix: true
NodeCount: 2, 2
Class:  list CONST, list STATEMENT
Actions:  
	"case", any, chgoto 0,
	":", any, chgoto 1,
	"endcase", any, H_EXPAND,
	"cr", pcode 2, H_EXPAND,
	"cr", any, BLCR,


Node: CASE_ELSE
Name: "select default"
Template:		"!c!kdefault\n",
				"!1l\n",
				"!T!kendcase\n"
KidMatrix:   0, 1  
Flags: LINE  INDENT
Infix: false
NodeCount: 1, 1
Class:  list STATEMENT
Actions:  
	"default", any, chgoto 0,
	"endcase", any, H_EXPAND,
	"cr", pcode 2, H_EXPAND,
	"cr", any, BLCR,
				

Node: CON_STRING
Name: "string constant"
Template:   "!c!ak!1S"
KidMatrix: nil
Flags: none
Infix: false
NodeCount: 0, 2
Class: 0

Node: CON_NUMB
Name: "number"
Template:   "!c!ai!1E"
KidMatrix: nil
Flags: none
Infix: false
NodeCount: 0, 2
Class: 0
Actions:


Node: VAR_ARRAY
Name: "array indexing"
Template:   "!1p!c[!(Subscript)!2,]"
KidMatrix: nil
Flags: TYPE  E2KIDS
Infix: true
NodeCount: 2, 3
Class:  VAR, list EXP  
Actions:  
	"[", any, chgoto 1,
	"]", any, CRIGHT,
	",", upkid 1, CMMA_EXPAND,

Node: VAR_SUBSTR
Name: "substring"
Template:   "!1p!c(!2p : !3p)"
KidMatrix: nil
Flags: TYPE  E2KIDS
Infix: true
NodeCount: 3, 4
Class:  VAR, EXP, EXP
Precedence: 0
Actions:  
	"(", any, chgoto 1,
	")", any, CRIGHT,
	":", any, chgoto 2,


Node: EXP_PAREN
Name: "parentheses"
Template:   "!c(!1p)"
KidMatrix: nil
Flags: E1KID
Infix: false
NodeCount: 1, 2
Class:  EXP  
Precedence: 0
Actions:  ")", any, IGNORE,
				

Node: EXP_NOT
Name: "not"
Template:   "!c!knot !1p"
KidMatrix: nil
Flags: E1KID
Infix: false
NodeCount: 1, 1
Class:  EXP  
Precedence: 24


Node: EXP_FUNC
Name: "function call"
Template:   "!1p!c(!2,)"
KidMatrix: nil
Flags: none
Infix: true
NodeCount: 2, 2
Class:  FUN_ID, list EXP
Actions:  ",", upkid 1, CMMA_EXPAND,
	")", any, IGNORE,
	"(", exact upkid 0, REEXPAND,

Precedence: 0


Node: EXP_UPLUS
Name: "unary plus"
Template: "!c+!1p"
KidMatrix: nil
Flags: E1KID
Infix: false
NodeCount: 1, 1
Class:  EXP  
Precedence: 8
				


Node: EXP_UMINUS
Name: "unary minus"
Template:   "!c-!1p"
KidMatrix: nil
Flags: E1KID
Infix: false
NodeCount: 1, 1
Class:  EXP  
Precedence: 8
				


Node: EXP_PLUS
Name: "addition"
Template:   "!1p !c+ !2p"
KidMatrix: nil
Flags: TYPE  E2KIDS
Infix: true
NodeCount: 2, 3
Class:  EXP, EXP  
Precedence: 16
				


Node: EXP_MINUS
Name: "subtraction"
Template:   "!1p !c- !2p"
KidMatrix: nil
Flags: TYPE  E2KIDS
Infix: true
NodeCount: 2, 3
Class:  EXP, EXP  
Precedence: 16
				


Node: EXP_OR
Name: "or"
Template:   "!1p !c!kor !2p"
KidMatrix: nil
Flags: E2KIDS
Infix: true
NodeCount: 2, 2
Class:  EXP, EXP  
Precedence: 28
				


Node: EXP_TIMES
Name: "multiplication"
Template:   "!1p!c*!2p"
KidMatrix: nil
Flags: TYPE  E2KIDS
Infix: true
NodeCount: 2, 3
Class:  EXP, EXP  
Precedence: 12
				


Node: EXP_SLASH
Name: "division"
Template:   "!1p!c/!2p"
KidMatrix: nil
Flags: E2KIDS
Infix: true
NodeCount: 2, 2
Class:  EXP, EXP  
Precedence: 12
				
Node: EXP_MOD
Name: "modulus"
Template:   "!1p !cmod !2p"
KidMatrix: nil
Flags: E2KIDS
Infix: true
NodeCount: 2, 2
Class:  EXP, EXP  
Precedence: 12


Node: EXP_POWER
Name: "exponentiation"
Template:   "!1p!c^!2p"
KidMatrix: nil
Flags: E2KIDS
Infix: true
NodeCount: 2, 2
Class:  EXP, EXP  
Precedence: 4
				
				

Node: EXP_AND
Name: "and"
Template:   "!1p !c!kand !2p"
KidMatrix: nil
Flags: E2KIDS
Infix: true
NodeCount: 2, 2
Class:  EXP, EXP  
Precedence: 26
				
Node: EXP_EQ
Name: "equality"
Template:   "!1p !c= !2p"
KidMatrix: nil
Flags: E2KIDS
Infix: true
NodeCount: 2, 3
Class:  EXP, EXP  
Precedence: 20
				


Node: EXP_NE
Name: "not equal"
Template:   "!1p !c<> !2p"
KidMatrix: nil
Flags: E2KIDS
Infix: true
NodeCount: 2, 3
Class:  EXP, EXP  
Precedence: 20
				


Node: EXP_LT
Name: "less than"
Template:   "!1p !c< !2p"
KidMatrix: nil
Flags: E2KIDS
Infix: true
NodeCount: 2, 3
Class:  EXP, EXP  
Precedence: 20
				
Node: EXP_LE
Name: "less or equal"
Template:   "!1p !c<= !2p"
KidMatrix: nil
Flags: E2KIDS
Infix: true
NodeCount: 2, 3
Class:  EXP, EXP  
Precedence: 20
				


Node: EXP_GT
Name: "greater than"
Template:   "!1p !c> !2p"
KidMatrix: nil
Flags: E2KIDS
Infix: true
NodeCount: 2, 3
Class:  EXP, EXP  
Precedence: 20
				


Node: EXP_GE
Name: "greater or equal"
Template:   "!1p !c>= !2p"
KidMatrix: nil
Flags: E2KIDS
Infix: true
NodeCount: 2, 3
Class:  EXP, EXP  
Precedence: 20
				

Node: EXP_ERROR
Name: "bad expression"
Template:   "!c!ac!1E"
KidMatrix: nil
Flags: none
Infix: false
NodeCount: 0, 1
Class:  0 


Node: REVEAL
Name: "revealed code"
Template:   		"!c!k{!1p (Revealed)}\n",
				"!2l\n",
				"\n",
KidMatrix: 0, 0,1
Flags: DECLARE  LINE
Infix: false
NodeCount: 2, 2
Class:  COMMENT, list PASSUP
Actions: "cr", pcode 2, H_EXPAND,
	 "cr", any, blcr 0

Node: HIDE
Name: "hidden code"
Template:   "!c!!... !1p ..."
KidMatrix: nil
Flags: DECLARE  LINE
Infix: false
NodeCount: 1, 2
Class:  COMMENT, PASSUP
Actions: "cr", any, CR,
	".", any, chgoto 0

Node: STUB
Name: "placeholder"
Template:  "!c!s"
KidMatrix: nil
Flags: none
Infix: false
NodeCount: 0, 1
Class: 0

Node: ID
Name: "Symbol"
Template:   "!c!1I"
KidMatrix: nil
Flags: none
Infix: false
NodeCount: 0, 1
Class: 0
Actions: "[", any, INDEX


Node: NAME
Name: "Unref Symbol"
Template:   "!c!1N"
KidMatrix: nil
Flags: none
Infix: false
NodeCount: 0, 1
Class: 0
Actions:

Node: LIST
Name: "List"
Template:   "!c!L"
KidMatrix: nil
Flags: DECLARE  NOSTOP
Infix: false
NodeCount: 0, 0
Class: 0  

Node: DECL_ID
Name: "name"
Template:  "!c!D"
KidMatrix: nil
Flags: none
Infix: false
NodeCount: 0, 0
Class:  0 
Actions: "[", any, INDEX

Node: SYMBOL_TABLE
Name: "Symbol Table"
KidMatrix: nil
Flags: NOSTOP
Infix: false
NodeCount: 0,1
Class:  0 
