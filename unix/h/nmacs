/* all the structure reference macros */

#define tfb(np)		(tr_far + (unsigned)np)

	/* ntype macro works with any node */
#define ntype(NdP)		(*(tr_far + (unsigned)NdP))
#define s_ntype(NdP,val)	*(tr_far + (unsigned)NdP) = (val)
#define node_flag(NdP)		*((NdP)+ tf_flags1)
#define s_node_flag(NdP,val)	*((NdP)+ tf_flags1) = (val)
#define or_node_flag(NdP,val)	*((NdP)+ tf_flags1) |= (val)
#define clr_node_flag(NdP,val)	*((NdP)+ tf_flags1) &= ~(val)
#define node_2flag(NdP)		*((NdP)+ tf_flags2)
#define s_2flag(NdP,val)	*((NdP)+ tf_flags2) = (val)
#define or_2flag(NdP,val)	*((NdP)+ tf_flags2) |= (val)
#define clr_2flag(NdP,val)	*((NdP)+ tf_flags2) &= ~(val)

#define NP(arg)		(*(nodep far *)(arg))

#define node_parent(NdP)	NP ((NdP)+ tf_n_parent)
#define s_node_parent(NdP,val) (NdP+ tf_n_parent = (val))
#define kid1(NdP)		NP ((NdP)+ tf_n_k0)
#define kid2(NdP)		NP ((NdP)+ tf_n_k1)
#define kid3(NdP)		NP ((NdP)+ tf_n_k2)
#define kid4(NdP)		NP ((NdP)+ tf_n_k3)
#define kid5(NdP)		NP ((NdP)+ tf_n_k4)
#define kid6(NdP)		NP ((NdP)+ tf_n_k5)
#define kid7(NdP)		NP ((NdP)+ tf_n_k6)
#define kid8(NdP)		NP ((NdP)+ tf_n_k7)
#define int_kid(num,NdP)	((int far *)((NdP)+ tf_n_k0))[num]
#define str_kid(num,NdP)	((char * far *)((NdP)+ tf_n_k0))[num]
#define s_str_kid(num,NdP,val)	((char * far *)((NdP)+ tf_n_k0))[num] = val
#ifdef Stomp_Check
#define s_int_kid(num,NdP,val)	s_node_kid(NdP,num,NCAST (val))
#define s_kid1(NdP,val)		s_node_kid(NdP,0,val)
#define s_kid2(NdP,val)		s_node_kid(NdP,1,val)
#define s_kid3(NdP,val)		s_node_kid(NdP,2,val)
#define s_kid4(NdP,val)		s_node_kid(NdP,3,val)
#define s_kid5(NdP,val)		s_node_kid(NdP,4,val)
#define s_kid6(NdP,val)		s_node_kid(NdP,5,val)
#define s_kid7(NdP,val)		s_node_kid(NdP,6,val)
#define s_kid8(NdP,val)		s_node_kid(NdP,7,val)
#else
#define s_int_kid(num,NdP,val)	 ((NdP)+ tf_n_kids[num] = (nodep )(val))
#define s_node_kid(NdP,knum,val)	(NdP)+ tf_n_kids[knum] = (val)
#define s_kid1(NdP,val)		NP((NdP)+ tf_n_k0)= (val)
#define s_kid2(NdP,val)		NP((NdP)+ tf_n_k1)= (val)
#define s_kid3(NdP,val)		NP((NdP)+ tf_n_k2)= (val)
#define s_kid4(NdP,val)		NP((NdP)+ tf_n_k3)= (val)
#define s_kid5(NdP,val)		NP((NdP)+ tf_n_k4)= (val)
#define s_kid6(NdP,val)		NP((NdP)+ tf_n_k5)= (val)
#define s_kid7(NdP,val)		NP((NdP)+ tf_n_k6)= (val)
#define s_kid8(NdP,val)		NP((NdP)+ tf_n_k7)= (val)
#endif
#define node_kid(num,NdP)	((nodep far *)((NdP)+ tf_n_k0))[num]
#define kid1adr(NdP)		((nodep far *)((NdP)+ tf_n_k0))

#define barglist(list,index,subel)	((bargs far *)(tr_far + list))[1+2*(index)+subel]
/* Generalized Parent */
#define tparent(listornode)	NP((listornode)+ tf_n_parent)
#define s_tparent(listornode,val)	NP((listornode)+ tf_n_parent) = (val)

#define list_parent		tparent
#define s_listparent		s_tparent
#define listcount		node_flag
#define listacount		node_2flag
#define s_listcount		s_node_flag
#define s_listacount		s_2flag
/* testing macros */

/* child of N_ID that is symbol */


#define kid_id(NdP)		(*(symptr far *)(NdP+ tf_n_k0))
#define s_kid_id(NdP,val)	(*(symptr far *)(NdP+ tf_n_k0)) = val)

#define sfp(symp) ((realsymptr)(tr_far + (unsigned)symp))
#define sym_name(sNdP)		sfp(sNdP)->s_name
#define	sym_nhash(sNdP)		sfp(sNdP)->s_namhash
#define sym_declaration(sNdP)	 sfp(sNdP)->n_parent
#define sym_mflags(sNdP)	(sfp(sNdP)->s_mflags)
#define sym_type(sNdP)		(sfp(sNdP)->s_type)
#define sym_next(sNdP)		(sfp(sNdP)->s_next)
#define sym_offset(sNdP)	(sfp(sNdP)->s_value)
#define sym_value(sNdP)		(sfp(sNdP)->s_value)
#define sym_ivalue(sNdP)	(sfp(sNdP)->s_value)
#define sym_framesize(sNdP)	sfp(sNdP)->s_value
#define sym_size(sNdP)		sfp(sNdP)->s_size
#define sym_dtype(sNdP)		sfp(sNdP)->s_decl_type
#define sym_scope(sNdP)		sfp(sNdP)->s_scope
#define sym_saveid(sNdP)	sfp(sNdP)->s_saveid

#define s_sym_name(sNdP, val)		(sfp(sNdP)->s_name = (val))
#define	s_sym_nhash(sNdP, val)		(sfp(sNdP)->s_namhash = (val))
#define s_sym_declaration(sNdP,val)	(sfp(sNdP)->n_parent = (val))
#define s_sym_mflags(sNdP, val)		(sfp(sNdP)->s_mflags = (val))
#define or_sym_mflags(sNdP, val)	(sfp(sNdP)->s_mflags |= (val))
#define clr_sym_mflags(sNdP, val)	(sfp(sNdP)->s_mflags &= ~(val))
#define s_sym_type(sNdP, val)		(sfp(sNdP)->s_type = (val))
#define s_sym_next(sNdP, val)		(sfp(sNdP)->s_next = (val))
#define s_sym_offset(sNdP,val)		sfp(sNdP)->s_value = (val)
#define s_sym_dtype(sNdP,val)		sfp(sNdP)->s_decl_type = (val)
#define s_sym_value(sNdP,val)		sfp(sNdP)->s_value = (val)
#define s_sym_ivalue(sNdP,val)		sfp(sNdP)->s_value = (val)
#define s_sym_framesize(sNdP,val)	sfp(sNdP)->s_value = (val)
#define s_sym_size(sNdP,val)		sfp(sNdP)->s_size = (val)
#define s_sym_scope(sNdP,val)		sfp(sNdP)->s_scope = (val)
#define s_sym_saveid(sNdP,val)		sfp(sNdP)->s_saveid = (val)

